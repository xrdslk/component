<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
       
	<bean class="com.xrds.basic.component.dal.config.JDBCPlaceholderConfigurer" >
		<property name="order" value="2" />
    	<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="location">
			<value>file:/opt/configs/component/datasource.properties</value>
		</property>
	</bean>
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${datasource.url}" />
		<property name="username" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />
		<property name="initialSize" value="${datasource.initialsize}" />
		<property name="maxActive" value="${datasource.maxActive}" />
		<property name="minIdle" value="${datasource.minIdle}" />
		<property name="connectionProperties" value="${datasource.connectionProperties}" />
		<property name="maxWait" value="${datasource.maxWait}" />
		<property name="testWhileIdle" value="${datasource.testWhileIdle}" />
		<property name="testOnBorrow" value="${datasource.testOnBorrow}" />
		<property name="testOnReturn" value="${datasource.testOnReturn}" />
		<property name="minEvictableIdleTimeMillis" value="${datasource.minEvictableIdleTimeMillis}" />
		<property name="maxEvictableIdleTimeMillis" value="${datasource.maxEvictableIdleTimeMillis}" />
		<property name="timeBetweenEvictionRunsMillis" value="${datasource.timeBetweenEvictionRunsMillis}" />
		<property name="logAbandoned" value="${datasource.logAbandoned}" />
		<property name="removeAbandoned" value="${datasource.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${datasource.removeAbandonedTimeoutMillis}" />
		<property name="poolPreparedStatements" value="${datasource.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${datasource.maxPoolPreparedStatementPerConnectionSize}" />
		<property name="filters" value="${datasource.filters}" />
		<property name="validationQuery" value="SELECT 1 FROM DUAL" />
		<property name="validationQueryTimeout" value="1" />
	</bean>
	
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation">
			<value>classpath:/configs/mybatis-config.xml</value>
		</property>
		<property name="mapperLocations">
			<list>
				<value>classpath:/mapper/**/*.xml</value>
			</list>
		</property>
		<property name="typeAliasesPackage" value="com.xrds.basic.component.dal.model" />
		<property name="plugins">
			<list>
				<bean class="com.xrds.basic.component.common.util.log.SQLLogInterceptor"></bean>
			</list>
		</property>
	</bean>
	
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sessionFactory"></property>
		<property name="basePackage" value="com.xrds.basic.component.dal" />
		<property name="annotationClass" value="com.xrds.basic.component.dal.config.BaseDB"/>
		<property name="properties">
			<value>
				mappers=tk.mybatis.mapper.common.Mapper
				IDENTITY=MYSQL
				notEmpty=true
			</value>
		</property>
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
    	<constructor-arg index="0" ref="sessionFactory" />
  	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 事务模板 -->
    <bean id="transactionTemplate"  class="org.springframework.transaction.support.TransactionTemplate">
    <property name="transactionManager" ref="transactionManager"/>
        <constructor-arg name="transactionManager" ref="transactionManager" />
    </bean>
    
</beans>